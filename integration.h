#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <iostream>
#include <fftw3.h>

// function pointer used for f(comp,time,vector);
using fptr = double(int, double, double *);

/*******************************************************************************

The structure EDM_Data is created in order to contain data generated by nume-
rical integration, and Fourier Analysis. It contains information of sampling
frequency, generated data.

Member function initialize is used to initialize structure.

*******************************************************************************/

struct EOM_Data{

  int dim;
  int NSTEP;
  double dt;
  double t0;
  double *init_data;
  double *motion;
  double *pdf;

  EOM_Data() {
    dim = 2;
    NSTEP = 1000;
    dt = 0.01;
    t0 = 0.0;
  };

  void initialize(int n, int N, double delta, double t_init);
  void kill();
  void WriteCoord(int i, int j, double x);
  double ReadCoord(int i, int j);
  void print_motion(double t_begin);
  void print_spectra(double f_top);
  void rk4_integration(fptr f);

};

 /******************************************************************************

 Implementation of elemntary Member functions used to simplify complex integra-
 tion routines.

 ******************************************************************************/

 void EOM_Data::initialize(int n, int N, double delta, double t_init){
   if(0 < n && 0 < N && 0 < delta){
     NSTEP = N;
     dim = n;
     dt = delta;
     t0 = t_init;
     init_data = (double*) calloc(dim,sizeof(double));
     motion = (double*) calloc(dim*NSTEP,sizeof(double));
   }
   else
     std::cerr << "Inappropriate initialization" << '\n';
 }

 void EOM_Data::kill(){
   free(init_data);
   free(motion);
   free(pdf);
 }

 void EOM_Data::WriteCoord(int i, int j, double x){
   if(i < NSTEP && j < dim)
     motion[dim*i+j] = x;
   else
     std::cerr << "Writing Outside Array" << '\n';
 }

 double EOM_Data::ReadCoord(int i, int j){
   if(i < NSTEP && j < dim)
     return motion[dim*i+j];
   else{
     std::cerr << "Reading Outside Array" << '\n';
     return 0.0;
   }
 }

 void EOM_Data::print_motion(double t_begin){
   double t = 0.0;
   for(int ii = 0; ii < NSTEP; ii++){
     t = t0 + ii*dt;
     if(t > t_begin){
       double ang = EOM_Data::ReadCoord(ii,0);
       double theta = atan2(sin(ang),cos(ang));
       printf("%4.7f\t %4.7e\t %4.7e\n",t,theta,EOM_Data::ReadCoord(ii,1));
     }
   }
 }

 void EOM_Data::print_spectra(double f_top){
   double f = 0.0;
   for(int ii = 0; f < f_top; ii++){
     f = ((1.0/dt)*ii)/NSTEP;
     printf("%4.7f\t %4.7e\n",f,dt*dt*pdf[ii]*pdf[ii]);
   }
 }
